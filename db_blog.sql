-- phpMyAdmin SQL Dump
-- version 4.5.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Dec 13, 2017 at 07:53 PM
-- Server version: 5.7.11
-- PHP Version: 7.0.4

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `db_blog`
--

-- --------------------------------------------------------

--
-- Table structure for table `tbl_category`
--

CREATE TABLE `tbl_category` (
  `id` int(11) NOT NULL,
  `name` varchar(50) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_category`
--

INSERT INTO `tbl_category` (`id`, `name`) VALUES
(25, 'CSS'),
(26, 'SMTP'),
(23, 'PHP'),
(24, 'Laravel');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_contact`
--

CREATE TABLE `tbl_contact` (
  `id` int(11) NOT NULL,
  `fname` varchar(255) NOT NULL,
  `lname` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_contact`
--

INSERT INTO `tbl_contact` (`id`, `fname`, `lname`, `email`, `body`, `status`, `date`) VALUES
(5, 'Mohammad Tanvir', 'Haque', 'shadakaloths@gmail.com', 'Every empty message has a message of its own :)', 1, '2017-09-12 11:45:42'),
(7, 'fdgsdfg', 'fdgsf', 's@gmail.com', 'sdgfgfhgdfg', 1, '2017-09-12 12:02:00'),
(8, 'MD Tanvir', 'Haque', 'shadakaloths@gmail.com', 'yes its working', 0, '2017-10-28 08:55:10'),
(9, 'MD Tanvir Haque', 'Sagar', 'shadakaloths002@gmail.com', 'What is done can be undone use ctrl+z :v :v', 0, '2017-11-02 17:08:49');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_cpyr8`
--

CREATE TABLE `tbl_cpyr8` (
  `id` int(11) NOT NULL,
  `note` varchar(500) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_cpyr8`
--

INSERT INTO `tbl_cpyr8` (`id`, `note`) VALUES
(1, 'Developers Hut');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_page`
--

CREATE TABLE `tbl_page` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `body` text NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_page`
--

INSERT INTO `tbl_page` (`id`, `name`, `body`) VALUES
(1, 'About Us', '<p><span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,</span></p>'),
(4, 'Privacy', '<p><span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc,</span></p>');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_post`
--

CREATE TABLE `tbl_post` (
  `id` int(11) NOT NULL,
  `cat` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `author` varchar(50) NOT NULL,
  `tag` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `userid` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_post`
--

INSERT INTO `tbl_post` (`id`, `cat`, `title`, `body`, `image`, `author`, `tag`, `date`, `userid`) VALUES
(26, 23, 'PHP- 20 awesome PHP libraries', '<p>Initially released in 1995, the PHP language is now of legal drinking age, but this doesn\'t stop it from still being one of the most popular languages out there, and the first choice of many back-end developers.</p>\r\n<p>The PHP community on&nbsp;<a href="https://github.com/trending/php" rel="noreferrer noopener" target="_blank">GitHub</a>&nbsp;is also one of the biggest and most active, with new awesome projects coming out constantly. Here are our picks for the 20 most useful and interesting open-source PHP libraries that you should check out - 2016 edition!</p>\r\n<h2><a href="https://github.com/Seldaek/monolog" rel="noreferrer noopener" target="_blank">Monolog</a></h2>\r\n<p>With Monolog you can create advanced logging systems by sending your PHP logs to files, sockets, databases, inboxes or other web services. The library has over 50 handlers for various utilities and can be integrated into frameworks such as Laravel, Symfony2 and Slim.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\\<span class="hljs-title">Logger</span>;\r\n<span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\\<span class="hljs-title">Handler</span>\\<span class="hljs-title">StreamHandler</span>;\r\n\r\n<span class="hljs-comment">// create a log channel</span>\r\n$log = <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">\'name\'</span>);\r\n$log-&gt;pushHandler(<span class="hljs-keyword">new</span> StreamHandler(<span class="hljs-string">\'path/to/your.log\'</span>, Logger::WARNING));\r\n\r\n<span class="hljs-comment">// add records to the log</span>\r\n$log-&gt;warning(<span class="hljs-string">\'Foo\'</span>);\r\n$log-&gt;error(<span class="hljs-string">\'Bar\'</span>);</pre>\r\n<div class="ad-container adsbygoogle hidden-xs hidden-sm">&nbsp;</div>\r\n<hr />\r\n<h2><a href="https://github.com/PHPOffice/PHPExcel" rel="noreferrer noopener" target="_blank">PHPExcel</a></h2>\r\n<p>A set of PHP classes that allow developers to easily implement spreadsheet editing in their apps. The library can read and write spreadsheet documents in a number of popular formats including Excel (both .xls and .xlsx), OpenDocument (.ods), and CSV to name a few.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">\'PHPExcel/IOFactory.php\'</span>;\r\n\r\n$inputFileName = <span class="hljs-string">\'./sampleData/example1.xls\'</span>;\r\n\r\n<span class="hljs-keyword">echo</span> <span class="hljs-string">\'Loading file \'</span>,pathinfo($inputFileName,PATHINFO_BASENAME),<span class="hljs-string">\' using IOFactory\'</span>;\r\n$objPHPExcel = PHPExcel_IOFactory::load($inputFileName);\r\n\r\n$sheetData = $objPHPExcel-&gt;getActiveSheet()-&gt;toArray(<span class="hljs-keyword">null</span>,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">true</span>);\r\nvar_dump($sheetData);</pre>\r\n<hr />\r\n<h2><a href="https://github.com/php-ai/php-ml" rel="noreferrer noopener" target="_blank">PHP-ML</a></h2>\r\n<p>An interesting library for experimenting with Machine Learning, PHP-ML gives you an easy to use API for training your bot and making it do predictions based on input data. It offers a variety of different algorithms for pattern recognition and complex statistics calculations.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\\<span class="hljs-title">Classification</span>\\<span class="hljs-title">KNearestNeighbors</span>;\r\n\r\n$samples = [[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>]];\r\n$labels = [<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'b\'</span>];\r\n\r\n$classifier = <span class="hljs-keyword">new</span> KNearestNeighbors();\r\n$classifier-&gt;train($samples, $labels);\r\n\r\n$classifier-&gt;predict([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]);\r\n<span class="hljs-comment">// returns \'b\' as the [3, 2] point is closer to the points in group b</span></pre>\r\n<hr />\r\n<h2><a href="https://github.com/opauth/opauth" rel="noreferrer noopener" target="_blank">Opauth</a></h2>\r\n<p>Library for enabling users to authenticate themselves via their account in social networks or other services. Of course all the big names are available: Google, Facebook, Twitter, Github, Instagram, LinkedIn. Opauth is supported by many PHP frameworks so it can be easily integrated in most PHP apps.</p>\r\n<pre class="hljs php"><span class="hljs-string">\'Strategy\'</span> =&gt; <span class="hljs-keyword">array</span>(  \r\n    <span class="hljs-comment">// Define strategies here.</span>\r\n\r\n    <span class="hljs-string">\'Facebook\'</span> =&gt; <span class="hljs-keyword">array</span>(\r\n        <span class="hljs-string">\'app_id\'</span> =&gt; <span class="hljs-string">\'YOUR APP ID\'</span>,\r\n        <span class="hljs-string">\'app_secret\'</span> =&gt; <span class="hljs-string">\'YOUR APP SECRET\'</span>\r\n    ),\r\n);</pre>\r\n<hr />\r\n<h2><a href="https://github.com/filp/whoops" rel="noreferrer noopener" target="_blank">Whoops</a></h2>\r\n<p>Whoops greatly improves the debugging experience in PHP by displaying a detailed error page when something breaks in an app. This error page gives us the full stack trace showing the specific files and snippets of code that caused the exception, all syntax-highlighted and colorful. The Laravel framework comes with Whoops built-in.</p>\r\n<pre class="hljs php">$whoops = <span class="hljs-keyword">new</span> \\Whoops\\Run;\r\n$whoops-&gt;pushHandler(<span class="hljs-keyword">new</span> \\Whoops\\Handler\\PrettyPageHandler);\r\n$whoops-&gt;register();\r\n<span class="hljs-comment">// That\'s it!</span></pre>\r\n<hr />\r\n<h2><a href="https://github.com/PHPSocialNetwork/phpfastcache" rel="noreferrer noopener" target="_blank">FastCache</a></h2>\r\n<p>Implementing this caching system in your PHP apps is guaranteed to make them load way quicker by reducing the amount of queries sent to the database. Instead of executing every DB query, FastCache sends only the unique ones, saves them as cache, and then serves them from there for each repetition. This way if you have the same query repeated 1000 times, it will be loaded from the DB one time, the rest 999 loads will be from cache.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">phpFastCache</span>\\<span class="hljs-title">CacheManager</span>;\r\n\r\n$config = <span class="hljs-keyword">array</span>(\r\n    <span class="hljs-string">"storage"</span>   =&gt;  <span class="hljs-string">"files"</span>,\r\n    <span class="hljs-string">"path"</span>      =&gt;  <span class="hljs-string">"/your_cache_path/dir/"</span>,\r\n);\r\nCacheManager::setup($config);\r\n\r\n<span class="hljs-comment">// Try to get from Cache first with an Identity Keyword</span>\r\n$products = CacheManager::get(<span class="hljs-string">"products"</span>);\r\n\r\n<span class="hljs-comment">// If not available get from DB and save in Cache.</span>\r\n<span class="hljs-keyword">if</span>(is_null($products)) {\r\n    $products = <span class="hljs-string">"DB SELECT QUERY"</span>;\r\n    <span class="hljs-comment">// Cache your $products for 600 seconds.</span>\r\n    CacheManager::set($cache_keyword, $products,<span class="hljs-number">600</span>);\r\n}</pre>\r\n<hr />\r\n<h2><a href="https://github.com/guzzle/guzzle" rel="noreferrer noopener" target="_blank">Guzzle</a></h2>\r\n<p>Guzzle is one of the best HTTP clients out there. It can handle almost any HTTP task that you throw at it: synchronous and asynchronous requests, HTTP cookies, streaming of large uploads and downloads. Working with Guzzle is really easy and the docs are well written with lots of examples and detailed explanations.</p>\r\n<pre class="hljs php">$client = <span class="hljs-keyword">new</span> GuzzleHttp\\Client();\r\n$res = $client-&gt;request(<span class="hljs-string">\'GET\'</span>, <span class="hljs-string">\'https://api.github.com/user\'</span>, [\r\n    <span class="hljs-string">\'auth\'</span> =&gt; [<span class="hljs-string">\'user\'</span>, <span class="hljs-string">\'pass\'</span>]\r\n]);\r\n<span class="hljs-keyword">echo</span> $res-&gt;getStatusCode();\r\n<span class="hljs-comment">// "200"</span>\r\n<span class="hljs-keyword">echo</span> $res-&gt;getHeader(<span class="hljs-string">\'content-type\'</span>);\r\n<span class="hljs-comment">// \'application/json; charset=utf8\'</span>\r\n<span class="hljs-keyword">echo</span> $res-&gt;getBody();\r\n<span class="hljs-comment">// {"type":"User"...\'</span>\r\n\r\n<span class="hljs-comment">// Send an asynchronous request.</span>\r\n$request = <span class="hljs-keyword">new</span> \\GuzzleHttp\\Psr7\\Request(<span class="hljs-string">\'GET\'</span>, <span class="hljs-string">\'http://httpbin.org\'</span>);\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($response)</span> </span>{\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'I completed! \'</span> . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();</pre>\r\n<hr />\r\n<h2><a href="https://github.com/meenie/munee" rel="noreferrer noopener" target="_blank">Munee</a></h2>\r\n<p>Munee has lots of tricks up its sleeve: combining several CSS or JavaScript requests into one, image resizing, automatic compilation for Sass, Less and CoffeeScript files, as well as minification and Gzip compression. All of the previously mentioned processes are cached both server-side and client-side for optimal performance.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">\'vendor/autoload.php\'</span>;\r\n<span class="hljs-keyword">echo</span> \\Munee\\Dispatcher::run(<span class="hljs-keyword">new</span> \\Munee\\Request());</pre>\r\n<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/bootstrap.min.css, /css/demo.css"</span>&gt;</span>\r\n\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/path/to/image.jpg?resize=width[100]height[100]exact[true]"</span>&gt;</span>\r\n\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/demo.scss"</span>&gt;</span>\r\n\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/script.js?minify=true"</span>&gt;</span><span class="hljs-tag">script</span>&gt;</pre>\r\n<hr />\r\n<h2><a href="https://github.com/twigphp/Twig" rel="noreferrer noopener" target="_blank">Twig</a></h2>\r\n<p>Templating engine with a very clean "mustache" syntax that makes markup shorter and easier to write. Twig offers everything you would expect from a modern templating library: variable escaping, loops, if/else blocks, as well as a secure sandbox mode for verifying template code.</p>\r\n<pre class="hljs php"><span class="hljs-comment">// Template HTML</span></pre>\r\n<p>Welcome {{ name }}!</p>\r\n<pre class="hljs php">\r\n<span class="hljs-comment">// Rendering</span>\r\n\r\n<span class="hljs-keyword">require_once</span> <span class="hljs-string">\'/path/to/lib/Twig/Autoloader.php\'</span>;\r\nTwig_Autoloader::register();\r\n\r\n$loader = <span class="hljs-keyword">new</span> Twig_Loader_Filesystem(<span class="hljs-string">\'/path/to/templates\'</span>);\r\n$twig = <span class="hljs-keyword">new</span> Twig_Environment($loader, <span class="hljs-keyword">array</span>(\r\n    <span class="hljs-string">\'cache\'</span> =&gt; <span class="hljs-string">\'/path/to/compilation_cache\'</span>,\r\n));\r\n\r\n<span class="hljs-keyword">echo</span> $twig-&gt;render(<span class="hljs-string">\'index.html\'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'George\'</span>));</pre>\r\n<hr />\r\n<h2><a href="https://github.com/FriendsOfPHP/Goutte" rel="noreferrer noopener" target="_blank">Goutte</a></h2>\r\n<p>Goutte is a Web Scraper that can crawl websites and extract HTML or XML data from them. It works by sending a request to a given URL and returning a Crawler object, which allows the developer to interact with the remote page in various ways.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Goutte</span>\\<span class="hljs-title">Client</span>;\r\n$client = <span class="hljs-keyword">new</span> Client();\r\n\r\n<span class="hljs-comment">// Go to the symfony.com website</span>\r\n$crawler = $client-&gt;request(<span class="hljs-string">\'GET\'</span>, <span class="hljs-string">\'http://www.symfony.com/blog/\'</span>);\r\n\r\n<span class="hljs-comment">// Click on the links</span>\r\n$link = $crawler-&gt;selectLink(<span class="hljs-string">\'Security Advisories\'</span>)-&gt;link();\r\n$crawler = $client-&gt;click($link);\r\n\r\n<span class="hljs-comment">// Extract data</span>\r\n$crawler-&gt;filter(<span class="hljs-string">\'h2 &gt; a\'</span>)-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($node)</span> </span>{\r\n    <span class="hljs-keyword">print</span> $node-&gt;text().<span class="hljs-string">"\\n"</span>;\r\n});</pre>\r\n<hr />\r\n<h2><a href="https://github.com/thephpleague/climate" rel="noreferrer noopener" target="_blank">Climate</a></h2>\r\n<p>Climate is a library for people who run PHP from the command line. It offers a collection of methods for talking to the terminal (both input and output), and also some beautifying functions for coloring and formatting. It can even draw and animate cool ASCII art.</p>\r\n<pre class="hljs php">$climate = <span class="hljs-keyword">new</span> League\\CLImate\\CLImate;\r\n\r\n<span class="hljs-comment">// Output</span>\r\n$climate-&gt;out(<span class="hljs-string">\'This prints to the terminal.\'</span>);\r\n\r\n<span class="hljs-comment">// Input</span>\r\n$input = $climate-&gt;input(<span class="hljs-string">\'How you doin?\'</span>);\r\n$response = $input-&gt;prompt();\r\n\r\n<span class="hljs-comment">// Formatting</span>\r\n$padding = $climate-&gt;padding(<span class="hljs-number">10</span>);\r\n\r\n$padding-&gt;label(<span class="hljs-string">\'Eggs\'</span>)-&gt;result(<span class="hljs-string">\'$1.99\'</span>);\r\n$padding-&gt;label(<span class="hljs-string">\'Oatmeal\'</span>)-&gt;result(<span class="hljs-string">\'$4.99\'</span>);\r\n<span class="hljs-comment">// Eggs...... $1.99</span>\r\n<span class="hljs-comment">// Oatmeal... $4.99</span></pre>\r\n<hr />\r\n<h2><a href="https://github.com/nelmio/alice" rel="noreferrer noopener" target="_blank">Alice</a></h2>\r\n<p>Built on top of&nbsp;<a href="https://github.com/fzaninotto/Faker" rel="noreferrer noopener" target="_blank">Faker</a>, Alice is a library that generates fake data objects for testing. To use it you first have to define the structure of your objects and what data you want in them. Then with a simple function call Alice will transform this template into an actual object with random values.</p>\r\n<pre class="hljs php"><span class="hljs-comment">// Template in person.yml file</span>\r\nPerson:\r\n    person{<span class="hljs-number">1.</span><span class="hljs-number">.10</span>}:\r\n        firstName: <span class="hljs-string">\'\'</span>\r\n        lastName: <span class="hljs-string">\'\'</span>\r\n        birthDate: <span class="hljs-string">\'\'</span>\r\n        email: <span class="hljs-string">\'\'</span>\r\n\r\n<span class="hljs-comment">// Load dummy data into an object</span>\r\n$person = \\Nelmio\\Alice\\Fixtures::load(<span class="hljs-string">\'/person.yml\'</span>, $objectManager);</pre>\r\n<hr />\r\n<h2><a href="https://github.com/ratchetphp/Ratchet/" rel="noreferrer noopener" target="_blank">Ratchet</a></h2>\r\n<p>The Ratchet library adds support for the&nbsp;<a href="https://en.wikipedia.org/wiki/WebSocket" rel="noreferrer noopener" target="_blank">WebSockets</a>&nbsp;interface in apps with a PHP backend. WebSockets enable two-way communication between the server and client side in real time. For this to work in PHP, Ratchet has to start a separate PHP process that stays always running and asynchronously sends and receives messages.</p>\r\n<pre class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyChat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MessageComponentInterface</span> </span>{\r\n    <span class="hljs-keyword">protected</span> $clients;\r\n\r\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>{\r\n        <span class="hljs-keyword">$this</span>-&gt;clients = <span class="hljs-keyword">new</span> \\SplObjectStorage;\r\n    }\r\n\r\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onOpen</span><span class="hljs-params">(ConnectionInterface $conn)</span> </span>{\r\n        <span class="hljs-keyword">$this</span>-&gt;clients-&gt;attach($conn);\r\n    }\r\n\r\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onMessage</span><span class="hljs-params">(ConnectionInterface $from, $msg)</span> </span>{\r\n        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;clients <span class="hljs-keyword">as</span> $client) {\r\n            <span class="hljs-keyword">if</span> ($from != $client) {\r\n                $client-&gt;send($msg);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class="hljs-comment">// Run the server application through the WebSocket protocol on port 8080</span>\r\n$app = <span class="hljs-keyword">new</span> Ratchet\\App(<span class="hljs-string">\'localhost\'</span>, <span class="hljs-number">8080</span>);\r\n$app-&gt;route(<span class="hljs-string">\'/chat\'</span>, <span class="hljs-keyword">new</span> MyChat);\r\n$app-&gt;run();</pre>\r\n<hr />\r\n<h2><a href="https://github.com/PHPMailer/PHPMailer" rel="noreferrer noopener" target="_blank">PHPMailer</a></h2>\r\n<p>No PHP library collection is complete without PHPMailer. This project is backed by a huge community and is implemented in popular systems such as WordPress and Drupal, making it the safest choice for sending emails in PHP. It has&nbsp;<a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol" rel="noreferrer noopener" target="_blank">SMTP</a>&nbsp;support, can do HTML-based emails, and much more.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">\'PHPMailerAutoload.php\'</span>;\r\n\r\n$mail = <span class="hljs-keyword">new</span> PHPMailer;\r\n\r\n$mail-&gt;setFrom(<span class="hljs-string">\'from@example.com\'</span>, <span class="hljs-string">\'Mailer\'</span>);\r\n$mail-&gt;addAddress(<span class="hljs-string">\'steve@example.com\'</span>);    \r\n\r\n$mail-&gt;addAttachment(<span class="hljs-string">\'/var/tmp/file.tar.gz\'</span>);        \r\n$mail-&gt;isHTML(<span class="hljs-keyword">true</span>);                                  \r\n\r\n$mail-&gt;Subject = <span class="hljs-string">\'Here is the subject\'</span>;\r\n$mail-&gt;Body    = <span class="hljs-string">\'This is the HTML message body <strong>in bold!</strong>\'</span>;\r\n\r\n<span class="hljs-keyword">if</span>(!$mail-&gt;send()) {\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'Message could not be sent.\'</span>;\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'Mailer Error: \'</span> . $mail-&gt;ErrorInfo;\r\n} <span class="hljs-keyword">else</span> {\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'Message has been sent\'</span>;\r\n}</pre>\r\n<hr />\r\n<h2><a href="http://hoa-project.net/En/" rel="noreferrer noopener" target="_blank">Hoa</a></h2>\r\n<p>Hoa isn\'t actually a PHP library - it\'s an entire set of PHP libraries, containing all kinds of useful web development utilities. Although not all are fully documented, there are 50+ libraries right now, with new ones constantly being added. It\'s completely modular so you can select only the libraries you need without any clutter.</p>\r\n<pre class="hljs php"><span class="hljs-comment">// Hoa Mail</span>\r\n$message            = <span class="hljs-keyword">new</span> Hoa\\Mail\\Message();\r\n$message[<span class="hljs-string">\'From\'</span>]    = <span class="hljs-string">\'Gordon Freeman \'</span>;\r\n$message[<span class="hljs-string">\'To\'</span>]      = <span class="hljs-string">\'Alyx Vance \'</span>;\r\n$message[<span class="hljs-string">\'Subject\'</span>] = <span class="hljs-string">\'Hoa is awesome!\'</span>;\r\n$message-&gt;addContent(\r\n    <span class="hljs-keyword">new</span> Hoa\\Mail\\Content\\Text(<span class="hljs-string">\'Check this out: http://hoa-project.net/!\'</span>)\r\n);\r\n$message-&gt;send();\r\n\r\n<span class="hljs-comment">// Hoa Session</span>\r\n$user = <span class="hljs-keyword">new</span> Hoa\\Session\\Session(<span class="hljs-string">\'user\'</span>);\r\n\r\n<span class="hljs-keyword">if</span> ($user-&gt;isEmpty()) {\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'first time\'</span>, <span class="hljs-string">"\\n"</span>;\r\n    $user[<span class="hljs-string">\'foo\'</span>] = time();\r\n} <span class="hljs-keyword">else</span> {\r\n    <span class="hljs-keyword">echo</span> <span class="hljs-string">\'other times\'</span>, <span class="hljs-string">"\\n"</span>;\r\n    var_dump($user[<span class="hljs-string">\'foo\'</span>]);\r\n}</pre>\r\n<hr />\r\n<h2><a href="https://github.com/tijsverkoyen/CssToInlineStyles" rel="noreferrer noopener" target="_blank">CssToInlineStyles</a></h2>\r\n<p>Anyone who has tried creating HTML emails knows what a pain it is to inline all of the CSS rules. This small PHP Class does the whole job for you, saving you lots of time and nerves. Just write your styles in a regular .css file and the PHP library will use the selectors to assign them at the proper tags.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">TijsVerkoyen</span>\\<span class="hljs-title">CssToInlineStyles</span>\\<span class="hljs-title">CssToInlineStyles</span>;\r\n\r\n<span class="hljs-comment">// create instance</span>\r\n$cssToInlineStyles = <span class="hljs-keyword">new</span> CssToInlineStyles();\r\n\r\n$html = file_get_contents(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">\'/examples/sumo/index.htm\'</span>);\r\n$css = file_get_contents(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">\'/examples/sumo/style.css\'</span>);\r\n\r\n<span class="hljs-comment">// output</span>\r\n<span class="hljs-keyword">echo</span> $cssToInlineStyles-&gt;convert(\r\n    $html,\r\n    $css\r\n);</pre>\r\n<hr />\r\n<h2><a href="https://github.com/danielstjules/Stringy" rel="noreferrer noopener" target="_blank">Stringy</a></h2>\r\n<p>Library for doing all kinds of string manipulations. It offers a ton of different methods for modifying text (<code>reverse()</code>,&nbsp;<code>htmlEncode()</code>,&nbsp;<code>toAscii()</code>&nbsp;etc.) or gather information about a string (<code>isAlphanumeric()</code>,&nbsp;<code>getEncoding()</code>, among others). A cool thing about Stringy is that it also works with special symbols like Greek or Nordic letters;</p>\r\n<pre class="hljs php">s(<span class="hljs-string">\'Camel-Case\'</span>)-&gt;camelize(); <span class="hljs-comment">// \'camelCase\'</span>\r\n\r\ns(<span class="hljs-string">\' &Omicron; &sigma;&upsilon;&gamma;&gamma;&rho;&alpha;&phi;Î­&alpha;&sigmaf; \'</span>)-&gt;collapseWhitespace(); <span class="hljs-comment">// \'&Omicron; &sigma;&upsilon;&gamma;&gamma;&rho;&alpha;&phi;Î­&alpha;&sigmaf;\'</span>\r\n\r\ns(<span class="hljs-string">\'foo &amp; bar\'</span>)-&gt;containsAll([<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'bar\'</span>]); <span class="hljs-comment">// true</span>\r\n\r\ns(<span class="hljs-string">\'str contains foo\'</span>)-&gt;containsAny([<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'bar\'</span>]); <span class="hljs-comment">// true</span>\r\n\r\ns(<span class="hljs-string">\'f&ograve;&ocirc;b&agrave;Å™\'</span>)-&gt;endsWith(<span class="hljs-string">\'b&agrave;Å™\'</span>, <span class="hljs-keyword">true</span>); <span class="hljs-comment">// true</span>\r\n\r\ns(<span class="hljs-string">\'f&ograve;&ocirc;b&agrave;Å™\'</span>)-&gt;getEncoding(); <span class="hljs-comment">// \'UTF-8\'</span>\r\n\r\ns(<span class="hljs-string">\'&amp;\'</span>)-&gt;htmlDecode(); <span class="hljs-comment">// \'&amp;\'</span></pre>\r\n<hr />\r\n<h2><a href="https://github.com/consolidation-org/Robo" rel="noreferrer noopener" target="_blank">Robo</a></h2>\r\n<p>Robo is a Gulp-like task runner, only for PHP. With it you can set up automations that improve your workflow and the time it takes to build a project after making changes. Robo can run tests, compile code from preprocessors, handle version control updates, and many other useful tasks.</p>\r\n<pre class="hljs php"><span class="hljs-comment">// Doing a Git Commit with Robo</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pharPublish</span><span class="hljs-params">()</span> </span>{\r\n    <span class="hljs-keyword">$this</span>-&gt;pharBuild()-&gt;run();\r\n    <span class="hljs-keyword">$this</span>-&gt;_rename(<span class="hljs-string">\'robo.phar\'</span>, <span class="hljs-string">\'robo-release.phar\'</span>);\r\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;collectionBuilder()\r\n        -&gt;taskGitStack()\r\n            -&gt;checkout(<span class="hljs-string">\'gh-pages\'</span>)\r\n        -&gt;taskGitStack()\r\n            -&gt;add(<span class="hljs-string">\'robo.phar\'</span>)\r\n            -&gt;commit(<span class="hljs-string">\'robo.phar published\'</span>)\r\n            -&gt;push(<span class="hljs-string">\'origin\'</span>, <span class="hljs-string">\'gh-pages\'</span>)\r\n            -&gt;checkout(<span class="hljs-string">\'master\'</span>)\r\n            -&gt;run();\r\n}</pre>\r\n<hr />\r\n<h2><a href="https://github.com/coduo/php-humanizer" rel="noreferrer noopener" target="_blank">PHP Humanizer</a></h2>\r\n<p>This library takes variables and transforms them into a more human-readable format using a set of methods. For example it can turn Roman numerals into numbers, truncate long strings, and calculate bytes to kB/MB/GB. Support for over 15 languages (the spoken kind, not programming ones).</p>\r\n<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Coduo</span>\\<span class="hljs-title">PHPHumanizer</span>\\<span class="hljs-title">NumberHumanizer</span>;\r\n\r\n<span class="hljs-keyword">echo</span> StringHumanizer::humanize(<span class="hljs-string">\'field_name\'</span>); <span class="hljs-comment">// "Field Name"</span>\r\n\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::ordinalize(<span class="hljs-number">1</span>); <span class="hljs-comment">// "1st"</span>\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::ordinalize(<span class="hljs-number">23</span>); <span class="hljs-comment">// "23rd"</span>\r\n\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::toRoman(<span class="hljs-number">5</span>); <span class="hljs-comment">// "V"</span>\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::fromRoman(<span class="hljs-string">"MMMCMXCIX"</span>); <span class="hljs-comment">// 3999</span>\r\n\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::binarySuffix(<span class="hljs-number">1024</span>); <span class="hljs-comment">// "1 kB"</span>\r\n<span class="hljs-keyword">echo</span> NumberHumanizer::binarySuffix(<span class="hljs-number">1073741824</span> * <span class="hljs-number">2</span>); <span class="hljs-comment">// "2 GB"</span></pre>\r\n<hr />\r\n<h2><a href="https://github.com/thephpleague/color-extractor" rel="noreferrer noopener" target="_blank">ColorExtractor</a></h2>\r\n<p>The last item on our list is this small library for extracting colors from images. It iterates all of the pixels in a given picture and returns a palette of the colors on it sorted by total area. Developers can then use this palette to get the most dominant colors and adapt the design according to them.</p>\r\n<pre class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">\'vendor/autoload.php\'</span>;\r\n\r\n<span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\\<span class="hljs-title">ColorExtractor</span>\\<span class="hljs-title">Color</span>;\r\n<span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\\<span class="hljs-title">ColorExtractor</span>\\<span class="hljs-title">Palette</span>;\r\n\r\n$palette = Palette::fromFilename(<span class="hljs-string">\'./some/image.png\'</span>);\r\n\r\n$topFive = $palette-&gt;getMostUsedColors(<span class="hljs-number">5</span>);\r\n$colorCount = count($palette);\r\n$blackCount = $palette-&gt;getColorCount(Color::fromHexToInt(<span class="hljs-string">\'#000000\'</span>));</pre>', 'images/6697b37419.png', 'Tanvir', 'php , php libraries', '2017-12-13 17:48:55', 4),
(25, 23, 'PHP is much better than you think', '<p>Rants about PHP are everywhere, and they even come from smart guys. When Jeff Atwood wrote yet another&nbsp;<a href="http://www.codinghorror.com/blog/2012/06/the-php-singularity.html">rant</a>&nbsp;about PHP, it made me think about the good parts of PHP.</p>\r\n<p>The biggest problem of these rants is that they come from people stuck in the old days of PHP. They either don\'t care or they don\'t want to admit that PHP actually evolves at a very fast pace, both at the language level but also at the community level. In fact, it evolves much faster than any other language or web platform. It has not always been the case, but the last 5 years have been an amazing journey for PHP.</p>\r\n<p>Before talking about the amazing things the PHP community has achieved recently, let\'s have a look at some interesting numbers: PHP is used by&nbsp;<a href="http://w3techs.com/technologies/overview/programming_language/all">77.9%</a>&nbsp;of all the websites whose server-side programming language is known. WordPress is used by&nbsp;<a href="http://w3techs.com/technologies/overview/content_management/all">16.6%</a>&nbsp;of&nbsp;<strong>all the websites</strong>&nbsp;in the world. If you have a look at the top three CMSes, for the websites that use a monitored content management system: Wordpress is first with 54.3%, Joomla is second with 9.2%, and Drupal is third with 6.8%. Three products written in PHP.</p>\r\n<p>PHP must have done something right, no?</p>\r\n<p>Now, let me tell you a secret, the PHP "tour de force": Despite the changes over the years, PHP is still the&nbsp;<strong>easiest language</strong>&nbsp;to learn for non-technical people: it allows anyone to create dynamic websites faster than with any other technologies, it allows anyone to host websites cheaply and without any hassles. PHP is probably not the best designed language in the world, but it lets you&nbsp;<strong>get things done</strong>, and you can\'t argue with that.</p>\r\n<h2 id="php-the-language">PHP, the Language</h2>\r\n<p>PHP 5.0 (released in 2004) brought us a very solid object model... wait a minute, I\'m talking about something released almost 8 years ago. Fast forward now. The latest PHP release, PHP 5.4, comes with all the bells and whistles you might dream of in a modern web language: yes, PHP supports namespaces; yes, PHP supports closures; yes, PHP supports traits.</p>\r\n<p>It took some time, but PHP 5.4 also comes with some nice syntactic sugar that makes the whole experience better than ever: yes, PHP supports&nbsp;<code>[]</code>&nbsp;to define arrays; yes, PHP supports calling a method on a newly created object (<code>(new Foo())-&gt;bar()</code>); yes, PHP supports getting an array item from any expression (<code>$foo-&gt;bar()[1]</code>).</p>\r\n<p>PHP has even learned from its mistakes:&nbsp;<code>register_globals</code>&nbsp;and&nbsp;<code>magic_quotes</code>&nbsp;are definitely gone.</p>\r\n<p>Last, but not the least, PHP even comes with a built-in web server that eases local testing... and it starts in a matter of micro-seconds.</p>\r\n<p><em>Next challenges</em>: How do we "upgrade" all the old tutorials talking about PHP on the web? What is the best way to support the WebSocket technology in a PHP application?</p>\r\n<h2 id="php-the-ecosystem">PHP, the Ecosystem</h2>\r\n<p>Having a good language is great, but having a great ecosystem is even better. And the PHP ecosystem has evolved a lot in the last few years.</p>\r\n<h3 id="git">Git</h3>\r\n<p>I won\'t talk too much about this one. Git is everywhere and PHP embraced Git pretty fast. Almost all major PHP libraries, frameworks, and products are now using Git, including PHP itself.</p>\r\n<h3 id="composer">Composer</h3>\r\n<p>Two years ago, I wanted to get rid of my ugly-PEAR-hack I did in symfony 1 to support plugins. I wanted to replace it with something that was able to manage project dependencies, not a global installer like PEAR. Managing dependencies is not an easy task, so I tried to find the best algorithm to manage software dependencies; I had a look at everything: from Perl to Ruby, from Debian to Redhat. Nothing was satisfactory: only homegrown solutions that happen to work... empirically. Then, I stumbled upon&nbsp;<a href="http://en.wikipedia.org/wiki/ZYpp">ZYpp</a>. That was it. ZYpp uses a&nbsp;<a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem">SAT</a>&nbsp;solver to manage dependencies. Fast forward. Thanks to the hard work of&nbsp;<a href="http://www.naderman.de/">Nils</a>&nbsp;Adermann and&nbsp;<a href="http://seld.be/">Jordi</a>&nbsp;Boggiano, PHP now has one of the best dependency manager,&nbsp;<a href="http://getcomposer.org/">Composer</a>.</p>\r\n<p>Yes, PHP has a better dependency manager than any other languages.</p>', 'images/13068cd651.jpg', 'Tanvir', 'PHP , better PHP , PHP Ecosystem', '2017-12-13 17:44:10', 4),
(27, 24, 'Laravel - 15 Essential Packages For Extending Laravel', '<p>Laravel is one of the most popular PHP frameworks for developing web applications. It offers a number of great features such as simple and fast routing, different ways for accessing relational databases, powerful dependency injection and much more.</p>\r\n<p>In this article we are going to share with you 15 excellent open-source PHP libraries for extending Laravel. You can easily include them in any Laravel project to add various utilities and improve your workflow.</p>\r\n<h2><a href="https://github.com/Zizaco/entrust" rel="noreferrer noopener" target="_blank">Entrust</a></h2>\r\n<p>Entrust is a Laravel 5 package which gives you a flexible way to add role-based permissions to your project. The library creates four new tables: roles, permissions, role_user and permission_role, which you can use to set up roles with different levels of access.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-comment">// Creating role and permissions</span>\r\n$admin = <span class="hljs-keyword">new</span> Role();\r\n$admin-&gt;name = <span class="hljs-string">\'admin\'</span>;\r\n$admin-&gt;display_name = <span class="hljs-string">\'User Administrator\'</span>; <span class="hljs-comment">// optional</span>\r\n$admin-&gt;description  = <span class="hljs-string">\'User is allowed to manage and edit other users\'</span>; <span class="hljs-comment">// optional</span>\r\n$admin-&gt;save();\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/laravel/socialite" rel="noreferrer noopener" target="_blank">Socialite</a></h2>\r\n<p>Socialite offers a simple and easy way to handle OAuth authentication. It makes it possible for your users to log-in via some of the most popular social networks and services including Facebook, Twitter, Google, GitHub and BitBucket.</p>\r\n<pre class="php hljs" data-type="php">$user = Socialite::driver(<span class="hljs-string">\'github\'</span>)-&gt;user();\r\n\r\n<span class="hljs-comment">// OAuth Two Providers</span>\r\n$token = $user-&gt;token;\r\n$refreshToken = $user-&gt;refreshToken; <span class="hljs-comment">// not always provided</span>\r\n$expiresIn = $user-&gt;expiresIn;\r\n\r\n<span class="hljs-comment">// All Providers</span>\r\n$user-&gt;getId();\r\n$user-&gt;getName();\r\n$user-&gt;getEmail();\r\n$user-&gt;getAvatar();\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/jrean/laravel-user-verification" rel="noreferrer noopener" target="_blank">User Verification</a></h2>\r\n<p>A package that allows you to verify users and validate emails. It generates and stores a verification token for the registered user, sends an email with the verification token link, handles the token verification, and sets the user as verified.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validator</span><span class="hljs-params">(array $data)</span> </span>{\r\n    <span class="hljs-keyword">return</span> Validator::make($data, [\r\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'required|max:255\'</span>,\r\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'required|email|max:255|unique:users\'</span>,\r\n        <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'required|min:6|confirmed\'</span>,\r\n    ]);\r\n}\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/laravel/tinker" rel="noreferrer noopener" target="_blank">Tinker</a></h2>\r\n<p>Tinker allows you to interact with your entire Laravel application from the command line and access all the Eloquent jobs, events, and objects. It used to be part of Laravel, but after version 5.4 it is in a optional add-on that needs to be installed separately.</p>\r\n<hr />\r\n<h2><a href="https://github.com/davejamesmiller/laravel-breadcrumbs" rel="noreferrer noopener" target="_blank">Breadcrumbs</a></h2>\r\n<p>With this package you can create breadcrumb page controls in a simple and easy way. It supports some of the most popular front-end frameworks such as Bootstrap, Bulma, Foundation and Materialize.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-comment">// Home &gt; Photos</span>\r\nBreadcrumbs::register(<span class="hljs-string">\'photo.index\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($breadcrumbs)</span> </span>{\r\n    $breadcrumbs-&gt;parent(<span class="hljs-string">\'Home\'</span>);\r\n    $breadcrumbs-&gt;push(<span class="hljs-string">\'Photos\'</span>, route(<span class="hljs-string">\'photo.index\'</span>));\r\n});\r\n\r\n<span class="hljs-comment">// Home &gt; Photos &gt; Upload Photo</span>\r\nBreadcrumbs::register(<span class="hljs-string">\'photo.create\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($breadcrumbs)</span> </span>{\r\n    $breadcrumbs-&gt;parent(<span class="hljs-string">\'photo.index\'</span>);\r\n    $breadcrumbs-&gt;push(<span class="hljs-string">\'Upload Photo\'</span>, route(<span class="hljs-string">\'photo.create\'</span>));\r\n});\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/cviebrock/eloquent-sluggable" rel="noreferrer noopener" target="_blank">Eloquent-Sluggable</a></h2>\r\n<p>Slugging is creating a simplified, URL-friendly version of a string by converting it to one case and removing spaces, accented letters, ampersands, etc. With Eloquent-Sluggable you can easily create slugs for all the Eloquent models in your project.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Eloquent</span> </span>{\r\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Sluggable</span>;\r\n    <span class="hljs-keyword">protected</span> $fillable = [<span class="hljs-string">\'title\'</span>];\r\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sluggable</span><span class="hljs-params">()</span> </span>{\r\n        <span class="hljs-keyword">return</span> [\r\n            <span class="hljs-string">\'slug\'</span> =&gt; [\r\n                <span class="hljs-string">\'source\'</span> =&gt; [<span class="hljs-string">\'title\'</span>]\r\n            ]\r\n        ];\r\n    }\r\n}\r\n\r\n$post = <span class="hljs-keyword">new</span> Post([\r\n    <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'My Awesome Blog Post\'</span>,\r\n]);\r\n<span class="hljs-comment">// $post-&gt;slug is "my-awesome-blog-post"</span>\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/Xethron/migrations-generator" rel="noreferrer noopener" target="_blank">Migrations Generator</a></h2>\r\n<p>A Laravel package which can be used to generate migrations from an existing database, including indexes and foreign keys. When you run the following command you can create migrations for all the tables in your database.</p>\r\n<pre class="php hljs" data-type="php"> php artisan migrate:generate</pre>\r\n<p>You can also choose only certain tables that you want to use:</p>\r\n<pre class="php hljs" data-type="php"> php artisan migrate:generate table1,table2 </pre>\r\n<hr />\r\n<h2><a href="https://github.com/anhskohbo/no-captcha" rel="noreferrer noopener" target="_blank">NoCaptcha</a></h2>\r\n<p>Laravel 5 package for implementing Google\'s&nbsp;<a href="https://www.google.com/recaptcha/intro/android.html" rel="noreferrer noopener" target="_blank">reCAPTCHA</a>&nbsp;"I\'m not a robot" validation and protecting your forms from spam. To use the service you will need to obtain a free API key.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-comment">// prevent validation error on captcha</span>\r\nNoCaptcha::shouldReceive(<span class="hljs-string">\'verifyResponse\'</span>)\r\n    -&gt;once()\r\n    -&gt;andReturn(<span class="hljs-keyword">true</span>);\r\n<span class="hljs-comment">// provide hidden input for your \'required\' validation</span>\r\nNoCaptcha::shouldReceive(<span class="hljs-string">\'display\'</span>)\r\n    -&gt;zeroOrMoreTimes()\r\n    -&gt;andReturn(<span class="hljs-string">\'</span><span class="hljs-string">\'</span>);\r\n    </pre>\r\n<hr />\r\n<h2><a href="https://github.com/svenluijten/artisan-view" rel="noreferrer noopener" target="_blank">Artisan View</a></h2>\r\n<p>A command line utility that adds a number of Artisan commands for working with the views in your app. It allows you to automatically generate view templates without having to manually create new blade files.</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-comment"># Create a view \'index.blade.php\' in the default directory</span>\r\n$ php artisan make:view index\r\n\r\n<span class="hljs-comment"># Create a view \'index.blade.php\' in a subdirectory (\'pages\')</span>\r\n$ php artisan make:view pages.index\r\n\r\n<span class="hljs-comment"># Add a section to the view</span>\r\n$ php artisan make:view index --section=content\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/spatie/laravel-backup" rel="noreferrer noopener" target="_blank">Laravel Backup</a></h2>\r\n<p>With this Laravel package you can back up all of the files in your project. All you need to do is run this command:</p>\r\n<pre class="php hljs" data-type="php">php artisan backup:run\r\n</pre>\r\n<p>It creates a zipfile with all the files in the directory and a dump of your database. Can be stored on any file system.</p>\r\n<hr />\r\n<h2><a href="https://github.com/barryvdh/laravel-cors" rel="noreferrer noopener" target="_blank">CORS Middleware</a></h2>\r\n<p>Setting up CORS (Cross-Origin Resource Sharing Headers) on your website can be a lot of work. With this Laravel library the configuration process is very simplified. It handles CORS pre-flight options requests and adds CORS headers to your responses</p>\r\n<pre class="php hljs" data-type="php"><span class="hljs-keyword">return</span> [\r\n    <span class="hljs-string">\'supportsCredentials\'</span> =&gt; <span class="hljs-keyword">false</span>,\r\n    <span class="hljs-string">\'allowedOrigins\'</span> =&gt; [<span class="hljs-string">\'*\'</span>],\r\n    <span class="hljs-string">\'allowedHeaders\'</span> =&gt; [<span class="hljs-string">\'Content-Type\'</span>, <span class="hljs-string">\'X-Requested-With\'</span>],\r\n    <span class="hljs-string">\'allowedMethods\'</span> =&gt; [<span class="hljs-string">\'*\'</span>], <span class="hljs-comment">// ex: [\'GET\', \'POST\', \'PUT\', \'DELETE\']</span>\r\n    <span class="hljs-string">\'exposedHeaders\'</span> =&gt; [],\r\n    <span class="hljs-string">\'maxAge\'</span> =&gt; <span class="hljs-number">0</span>,\r\n]\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/Folkloreatelier/laravel-graphql" rel="noreferrer noopener" target="_blank">Laravel GraphQL</a></h2>\r\n<p>GraphQL is a data query language that provides an alternative to traditional REST architectures. Developers define the structure of the data required, and get exactly the same structure from the server. This package will help you set up and use GraphQL in your Laravel apps.</p>\r\n<hr />\r\n<h2><a href="https://github.com/JeffreyWay/laravel-mix" rel="noreferrer noopener" target="_blank">Laravel Mix</a></h2>\r\n<p>Laravel Mix provides a rich API for defining Webpack build steps for your project. It uses a few common CSS and JavaScript pre-processors that can be chained together to transform and format your assets.</p>\r\n<pre class="php hljs" data-type="php">mix.js(<span class="hljs-string">\'resources/assets/js/app.js\'</span>, <span class="hljs-string">\'public/js\'</span>)\r\n   .sass(<span class="hljs-string">\'resources/assets/sass/app.scss\'</span>, <span class="hljs-string">\'public/css\'</span>);\r\n</pre>\r\n<hr />\r\n<h2><a href="https://github.com/laracasts/Laravel-5-Generators-Extended" rel="noreferrer noopener" target="_blank">Laravel Extended Generators</a></h2>\r\n<p>A library by the team from&nbsp;<a href="https://laracasts.com/" rel="noreferrer noopener" target="_blank">Laracasts</a>&nbsp;that offers a number of generators that can save you a lot of time when developing your project. It allows you to quickly setup new models, views, controllers, migrations, seeds, and more.</p>', 'images/727364b801.png', 'Tanvir', 'Laravel , Laravel', '2017-12-13 17:55:08', 4);
INSERT INTO `tbl_post` (`id`, `cat`, `title`, `body`, `image`, `author`, `tag`, `date`, `userid`) VALUES
(33, 26, 'SMTP - Simple Mail Transfer Protocol', '<p>Various forms of one-to-one&nbsp;<a title="Instant messaging" href="https://en.wikipedia.org/wiki/Instant_messaging">electronic messaging</a>&nbsp;were used in the 1960s. People communicated with one another using systems developed for specific&nbsp;<a title="Mainframe computer" href="https://en.wikipedia.org/wiki/Mainframe_computer">mainframe</a>&nbsp;computers. As more computers were interconnected, especially in the US Government\'s&nbsp;<a title="ARPANET" href="https://en.wikipedia.org/wiki/ARPANET">ARPANET</a>, standards were developed to allow users of different systems to email one another. SMTP grew out of these standards developed during the 1970s.</p>\r\n<p>SMTP can trace its roots to two implementations described in 1971: the Mail Box Protocol, whose implementation has been disputed,<sup id="cite_ref-2" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-2">[2]</a></sup>&nbsp;but is discussed in&nbsp;<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc196" rel="nofollow">196</a>&nbsp;and other RFCs, and the SNDMSG program, which, according to&nbsp;<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc2235" rel="nofollow">2235</a>,&nbsp;<a title="Ray Tomlinson" href="https://en.wikipedia.org/wiki/Ray_Tomlinson">Ray Tomlinson</a>&nbsp;of&nbsp;<a title="BBN Technologies" href="https://en.wikipedia.org/wiki/BBN_Technologies">BBN</a>&nbsp;invented for&nbsp;<a title="TOPS-20" href="https://en.wikipedia.org/wiki/TOPS-20#TENEX">TENEX</a>&nbsp;computers to send mail messages across the ARPANET.<sup id="cite_ref-3" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-3">[3]</a></sup><sup id="cite_ref-4" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-4">[4]</a></sup><sup id="cite_ref-5" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-5">[5]</a></sup>Fewer than 50 hosts were connected to the ARPANET at this time.<sup id="cite_ref-6" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-6">[6]</a></sup></p>\r\n<p>Further implementations include FTP Mail<sup id="cite_ref-7" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-7">[7]</a></sup>&nbsp;and Mail Protocol, both from 1973.<sup id="cite_ref-8" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-8">[8]</a></sup>&nbsp;Development work continued throughout the 1970s, until the ARPANET transitioned into the modern Internet around 1980.&nbsp;<a title="Jon Postel" href="https://en.wikipedia.org/wiki/Jon_Postel">Jon Postel</a>&nbsp;then proposed a&nbsp;<a title="Mail Transfer Protocol" href="https://en.wikipedia.org/wiki/Mail_Transfer_Protocol">Mail Transfer Protocol</a>&nbsp;in 1980 that began to remove the mail\'s reliance on&nbsp;<a title="File Transfer Protocol" href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</a>.<sup id="cite_ref-9" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-9">[9]</a></sup>&nbsp;SMTP was published as&nbsp;<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc788" rel="nofollow">788</a>&nbsp;in November 1981, also by Postel.</p>\r\n<p>The SMTP standard was developed around the same time as&nbsp;<a title="Usenet" href="https://en.wikipedia.org/wiki/Usenet">Usenet</a>, a one-to-many communication network with some similarities.</p>\r\n<p>SMTP became widely used in the early 1980s. At the time, it was a complement to&nbsp;<a title="UUCP" href="https://en.wikipedia.org/wiki/UUCP">Unix to Unix Copy Program</a>&nbsp;(UUCP) mail, which was better suited for handling email transfers between machines that were intermittently connected. SMTP, on the other hand, works best when both the sending and receiving machines are connected to the network all the time. Both use a&nbsp;<a title="Store and forward" href="https://en.wikipedia.org/wiki/Store_and_forward">store and forward</a>&nbsp;mechanism and are examples of&nbsp;<a title="Push technology" href="https://en.wikipedia.org/wiki/Push_technology">push technology</a>. Though Usenet\'s&nbsp;<a title="Usenet newsgroup" href="https://en.wikipedia.org/wiki/Usenet_newsgroup">newsgroups</a>&nbsp;are still propagated with UUCP between servers,<sup id="cite_ref-10" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-10">[10]</a></sup>&nbsp;UUCP as a mail transport has virtually disappeared<sup id="cite_ref-11" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-11">[11]</a></sup>&nbsp;along with the "<a class="mw-redirect" title="Bang path" href="https://en.wikipedia.org/wiki/Bang_path">bang paths</a>" it used as message routing headers.<sup id="cite_ref-12" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-12">[12]</a></sup></p>\r\n<p><a title="Sendmail" href="https://en.wikipedia.org/wiki/Sendmail">Sendmail</a>, released with&nbsp;<a title="Berkeley Software Distribution" href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">4.1cBSD</a>, right after&nbsp;<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc788" rel="nofollow">788</a>, was one of the first mail transfer agents to implement SMTP.<sup id="cite_ref-13" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-13">[13]</a></sup>&nbsp;Over time, as BSD Unix became the most popular operating system on the Internet, sendmail became the most common&nbsp;<a class="mw-redirect" title="Message Transfer Agent" href="https://en.wikipedia.org/wiki/Message_Transfer_Agent">MTA</a>&nbsp;(mail transfer agent).<sup id="cite_ref-14" class="reference"><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#cite_note-14">[14]</a></sup>&nbsp;Some other popular SMTP server programs include<sup class="noprint Inline-Template noprint Template-Timefact">[<em><a title="Wikipedia:WikiProject Timeline Tracer/Chronology source needed" href="https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Timeline_Tracer/Chronology_source_needed"><span title="This chronology/history reference needs citation to reliable sources (June 2012)">chronology citation needed</span></a></em>]</sup>&nbsp;<a title="Postfix (software)" href="https://en.wikipedia.org/wiki/Postfix_(software)">Postfix</a>,&nbsp;<a title="Qmail" href="https://en.wikipedia.org/wiki/Qmail">qmail</a>,&nbsp;<a title="GroupWise" href="https://en.wikipedia.org/wiki/GroupWise">Novell GroupWise</a>,&nbsp;<a title="Exim" href="https://en.wikipedia.org/wiki/Exim">Exim</a>,&nbsp;<a title="M+NetMail" href="https://en.wikipedia.org/wiki/M%2BNetMail">Novell NetMail</a>,&nbsp;<a title="Microsoft Exchange Server" href="https://en.wikipedia.org/wiki/Microsoft_Exchange_Server">Microsoft Exchange Server</a>&nbsp;and&nbsp;<a title="Oracle Communications Messaging Server" href="https://en.wikipedia.org/wiki/Oracle_Communications_Messaging_Server">Oracle Communications Messaging Server</a>.</p>\r\n<p>Message submission (<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc2476" rel="nofollow">2476</a>) and&nbsp;<a title="SMTP Authentication" href="https://en.wikipedia.org/wiki/SMTP_Authentication">SMTP-AUTH</a>&nbsp;(<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc2554" rel="nofollow">2554</a>) were introduced in 1998 and 1999, both describing new trends in email delivery. Originally, SMTP servers were typically internal to an organization, receiving mail for the organization&nbsp;<em>from the outside</em>, and relaying messages from the organization&nbsp;<em>to the outside</em>. But as time went on, SMTP servers (mail transfer agents), in practice, were expanding their roles to become&nbsp;<a class="mw-redirect" title="Mail submission agent" href="https://en.wikipedia.org/wiki/Mail_submission_agent">message submission agents</a>&nbsp;for&nbsp;<a title="Email client" href="https://en.wikipedia.org/wiki/Email_client">Mail user agents</a>, some of which were now relaying mail&nbsp;<em>from the outside</em>&nbsp;of an organization. (e.g. a company executive wishes to send email while on a trip using the corporate SMTP server.) This issue, a consequence of the rapid expansion and popularity of the&nbsp;<a title="World Wide Web" href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>, meant that SMTP had to include specific rules and methods for relaying mail and authenticating users to prevent abuses such as relaying of unsolicited email (<a title="Email spam" href="https://en.wikipedia.org/wiki/Email_spam">spam</a>). Work on message submission (<a class="mw-redirect" title="Request for Comments (identifier)" href="https://en.wikipedia.org/wiki/Request_for_Comments_(identifier)">RFC</a>&nbsp;<a class="external text" href="https://tools.ietf.org/html/rfc2476" rel="nofollow">2476</a>) was originally started because popular mail servers would often rewrite mail in an attempt to fix problems in it, for example, adding a domain name to an unqualified address. This behavior is helpful when the message being fixed is an initial submission, but dangerous and harmful when the message originated elsewhere and is being relayed. Cleanly separating mail into submission and relay was seen as a way to permit and encourage rewriting submissions while prohibiting rewriting relay. As spam became more prevalent, it was also seen as a way to provide authorization for mail being sent out from an organization, as well as traceability. This separation of relay and submission quickly became a foundation for modern email security practices.</p>\r\n<p>As this protocol started out purely&nbsp;<a title="ASCII" href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>&nbsp;text-based, it did not deal well with binary files, or characters in many non-English languages. Standards such as Multipurpose Internet Mail Extensions (<a title="MIME" href="https://en.wikipedia.org/wiki/MIME">MIME</a>) were developed to encode binary files for transfer through SMTP. Mail transfer agents (MTAs) developed after&nbsp;<a title="Sendmail" href="https://en.wikipedia.org/wiki/Sendmail">Sendmail</a>&nbsp;also tended to be implemented&nbsp;<a class="mw-redirect" title="8-bit-clean" href="https://en.wikipedia.org/wiki/8-bit-clean">8-bit-clean</a>, so that the alternate "just send eight" strategy could be used to transmit arbitrary text data (in any 8-bit ASCII-like character encoding) via SMTP.&nbsp;<a title="Mojibake" href="https://en.wikipedia.org/wiki/Mojibake">Mojibake</a>&nbsp;was still a problem due to differing character set mappings between vendors, although the email addresses themselves still allowed only&nbsp;<a title="ASCII" href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>. 8-bit-clean MTAs today tend to support the&nbsp;<a title="Extended SMTP" href="https://en.wikipedia.org/wiki/Extended_SMTP#8BITMIME">8BITMIME</a>extension, permitting binary files to be transmitted almost as easily as plain text. Recently the&nbsp;<a title="Extended SMTP" href="https://en.wikipedia.org/wiki/Extended_SMTP#SMTPUTF8">SMTPUTF8</a>&nbsp;extension was created to support&nbsp;<a title="UTF-8" href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>&nbsp;text, allowing international content and addresses in non-<a title="Latin script" href="https://en.wikipedia.org/wiki/Latin_script">Latin</a>&nbsp;scripts like&nbsp;<a title="Cyrillic script" href="https://en.wikipedia.org/wiki/Cyrillic_script">Cyrillic</a>&nbsp;or&nbsp;<a title="Chinese characters" href="https://en.wikipedia.org/wiki/Chinese_characters">Chinese</a>.</p>\r\n<p>Many people contributed to the core SMTP specifications, among them&nbsp;<a title="Jon Postel" href="https://en.wikipedia.org/wiki/Jon_Postel">Jon Postel</a>,&nbsp;<a title="Eric Allman" href="https://en.wikipedia.org/wiki/Eric_Allman">Eric Allman</a>, Dave Crocker,&nbsp;<a title="Ned Freed" href="https://en.wikipedia.org/wiki/Ned_Freed">Ned Freed</a>, Randall Gellens,&nbsp;<a title="John Klensin" href="https://en.wikipedia.org/wiki/John_Klensin">John Klensin</a>, and&nbsp;<a title="Keith Moore" href="https://en.wikipedia.org/wiki/Keith_Moore">Keith Moore</a>.</p>', 'images/8a0dd5f5ae.png', 'Tanvir', 'smtp', '2017-12-13 19:21:44', 4);

-- --------------------------------------------------------

--
-- Table structure for table `tbl_slider`
--

CREATE TABLE `tbl_slider` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `image` varchar(255) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_slider`
--

INSERT INTO `tbl_slider` (`id`, `title`, `image`) VALUES
(29, 'Coding', 'images/slider/971e950bf8.jpg'),
(24, 'Coding', 'images/slider/f91762aef2.jpg'),
(28, 'Type & Code', 'images/slider/5bafb4a1b8.jpg'),
(27, 'Coding', 'images/slider/8e8349dfcc.jpg');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_social`
--

CREATE TABLE `tbl_social` (
  `id` int(11) NOT NULL,
  `fb` varchar(500) NOT NULL,
  `tw` varchar(500) NOT NULL,
  `ln` varchar(500) NOT NULL,
  `gg` varchar(500) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_social`
--

INSERT INTO `tbl_social` (`id`, `fb`, `tw`, `ln`, `gg`) VALUES
(1, 'https://www.facebook.com/', 'www.twiter.com', 'www.linkedin.com', 'www.google.com');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_theme`
--

CREATE TABLE `tbl_theme` (
  `id` int(11) NOT NULL,
  `theme` varchar(10) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_theme`
--

INSERT INTO `tbl_theme` (`id`, `theme`) VALUES
(1, 'red');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_user`
--

CREATE TABLE `tbl_user` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(32) NOT NULL,
  `email` varchar(255) NOT NULL,
  `details` text,
  `role` int(2) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_user`
--

INSERT INTO `tbl_user` (`id`, `username`, `password`, `email`, `details`, `role`) VALUES
(6, 'Tanvir', 'a262d18efe4ed0d8f4349ad96941a929', 'shadakaloths02@gmail.com', '<p>here is my details</p>', 2),
(7, 'Sagar', 'a262d18efe4ed0d8f4349ad96941a929', 'shada@gmail.com', NULL, 3);

-- --------------------------------------------------------

--
-- Table structure for table `title_slogan`
--

CREATE TABLE `title_slogan` (
  `id` int(11) NOT NULL,
  `title` varchar(250) NOT NULL,
  `slogan` varchar(250) NOT NULL,
  `logo` varchar(50) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `title_slogan`
--

INSERT INTO `title_slogan` (`id`, `title`, `slogan`, `logo`) VALUES
(1, 'Developers Hut', 'Web Development and Software Development  Essentials', 'images/3b0b81c2a7.png');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `tbl_category`
--
ALTER TABLE `tbl_category`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_contact`
--
ALTER TABLE `tbl_contact`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_cpyr8`
--
ALTER TABLE `tbl_cpyr8`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_page`
--
ALTER TABLE `tbl_page`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_post`
--
ALTER TABLE `tbl_post`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_slider`
--
ALTER TABLE `tbl_slider`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_social`
--
ALTER TABLE `tbl_social`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_theme`
--
ALTER TABLE `tbl_theme`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_user`
--
ALTER TABLE `tbl_user`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `title_slogan`
--
ALTER TABLE `title_slogan`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `tbl_category`
--
ALTER TABLE `tbl_category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=27;
--
-- AUTO_INCREMENT for table `tbl_contact`
--
ALTER TABLE `tbl_contact`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT for table `tbl_cpyr8`
--
ALTER TABLE `tbl_cpyr8`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `tbl_page`
--
ALTER TABLE `tbl_page`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
--
-- AUTO_INCREMENT for table `tbl_post`
--
ALTER TABLE `tbl_post`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;
--
-- AUTO_INCREMENT for table `tbl_slider`
--
ALTER TABLE `tbl_slider`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=30;
--
-- AUTO_INCREMENT for table `tbl_social`
--
ALTER TABLE `tbl_social`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `tbl_theme`
--
ALTER TABLE `tbl_theme`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `tbl_user`
--
ALTER TABLE `tbl_user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `title_slogan`
--
ALTER TABLE `title_slogan`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
